confint(data$Sweat_rate)
install.packages("agricolae")
p <- ncol(data)
(n-1)p/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)*p)/(n*(n-p))
((n-1)*p /(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
T2 <- n*t(xbar)%*%Sinv%*%xbar
Sinv < -ginv(S)
Sinv <- ginv(S)
Sinv <- solve(S)
T2 <- n*t(xbar)%*%Sinv%*%xbar
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
xbar <- as.matrix(apply(data, 2, mean))
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta1.L=xbar[1,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta1.U=xbar[1,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta2.L=xbar[2,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
xbar
View(S)
delta3.L=xbar[3,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
delta3.U=xbar[3,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
c(delta13L,delta3.U)
c(delta3.L,delta3.U)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
c(delta3.L,delta3.U)
delta1.LB=xbar[1,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta1.UB=xbar[1,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta2.LB=xbar[2,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta2.UB=xbar[2,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta3.LB=xbar[3,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
delta3.UB=xbar[3,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
c(delta1.LB,delta1.UB)c(delta1.LB,delta1.UB)
c(delta1.LB,delta1.UB)
c(delta2.LB,delta2.UB)
c(delta3.LB,delta3.UB)
n <- nrow(data)
p <- ncol(data)
a <- matrix(c(1,0,0))
S <- cov(data)
Sinv <- solve(S)
xbar <- as.matrix(apply(data, 2, mean))
delta1.L=xbar[1,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta1.U=xbar[1,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta2.L=xbar[2,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta3.L=xbar[3,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
delta3.U=xbar[3,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
data2 <- matrix(c(0.48, 40.53, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 73.68, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 9)
View(data2)
dataEllipse(data[1,], data[2,],level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1)
install.packages("ellipse")
library(ellipse)
dataEllipse(data[1,], data[2,],level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1)
ellipse(data[1,], data[2,],level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1)
plot(ellipse(data[1,], data[2,],level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1))
data[1,]
data2[2,]
plot(ellipse(data2[1,], data2[2,],level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1))
ellipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1))
ellipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1))
ellipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1)
dataEllipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St",col=1)
ellipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
plot(ellipse(data2[1,], data2[2,],xlim=c(10,28),ylim=c(38,130),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St"))
plot(ellipse(data2,which = c(1,2),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St"))
plot(ellipse(data2,which = c(1,2),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St"))
dataellipse(data2,which = c(1,2),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St"))
dataellipse(data2,which = c(1,2),level=0.90,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
plot(ellipse(data2,which = c(1,2),level=0.90),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
plot(ellipse(data2,which = c(1,2)),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
plot(ellipse(data2,which = c(1,2), level = 0.9),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
library(car)
dataEllipse(data2,which = c(1,2), level = 0.9),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9,xlim = c(0,42), ylim = c(0,74),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9,xlim = c(0,42), ylim = c(0,74),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9, xlim = c(10,42), ylim = c(0,74),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9, xlim = c(00,42), ylim = c(0,74),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
View(data2)
data2 <- matrix(c(0.48, 40.53, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 73.68, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 9, byrow = TRUE)
View(data2)
dataEllipse(data2[1,], data2[2,], level = 0.9, xlim = c(00,42), ylim = c(0,74),main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], level = 0.9,main="Mineral Analysis \n90% Density Region for Normal Population \nand Confidence Regions (90% and 95%) for Mean Vector",xlab="Cr",ylab="St")
X<-rep(1,30)
confidenceEllipse(lm(cbind(Stiffness,Strength) ~ 0 + X, data=Lumber), Scheffe=FALSE, add=TRUE,level=c(0.95,0.99))
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=c(0.95,0.99))
X<-rep(1,30)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=c(0.95,0.99))
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
X<-rep(1,12)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
X<-rep(1,9)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
dataEllipse(data2[1,], data2[2,],main="Mineral Analysis \nwith Confidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],main="Mineral Analysis \nwith Confidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], xlim = c(-100,60)main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,], xlim = c(-100,60),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-100,80) xlim = c(-100,60),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-100,80), xlim = c(-100,60),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-60,80), xlim = c(-40,60),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-60,80), xlim = c(-40,50),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-55,85), xlim = c(-40,50),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
min(confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9))
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9))
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
dataEllipse(data2[1,], data2[2,],ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \nwith Confidence Region (90%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
dataEllipse(data2[1,], data2[2,],level = 0.9,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE, add=TRUE,level=0.9)
lines(c(-5,18),c(74.6,74.6),lty=2)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9)
summary(confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9))
dataEllipse(data2[1,], data2[2,],level = 0.9,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
dataEllipse(data2[1,], data2[2,],ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
dataEllipse(data2[1,], data2[2,],ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
9
9
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
dataEllipse(data2[1,], data2[2,],level = 0.9,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
lines(c(-50,-5.8),c(35.2),35.2),lty=2)
lines(c(-50,-5.8),c(35.2,35.2),lty=2)
lines(c(-50,16.2),c(35.2,35.2),lty=2)
lines(c(-50,-5.3),c(-3,-3),lty=2)
lines(c(-5.3,-5.3),c(-65,35.2),lty=2)
lines(c(-5.3,-5.3),c(-65,-3),lty=2)
dataEllipse(data2[1,], data2[2,],level = 0.9,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nand Confidence Regions (95% and 99%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
lines(c(-50,16.2),c(35.2,35.2),lty=2)
lines(c(-50,-5.3),c(-3,-3),lty=2)
lines(c(-5.3,-5.3),c(-65,-3),lty=2)
lines(c(16.2,16.2),c(-65,35.2),lty=2)
dataEllipse(data2[1,], data2[2,],level = 0.95,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nConfidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
lines(c(-50,16.2),c(35.2,35.2),lty=2)
lines(c(-50,-5.3),c(-3,-3),lty=2)
lines(c(-5.3,-5.3),c(-65,-3),lty=2)
lines(c(16.2,16.2),c(-65,35.2),lty=2)
spm(t(data2),diagonal=c("boxplot"),smooth=FALSE,reg.line=FALSE,ellipse=TRUE,robust=FALSE,levels=c(0.90),main=c("Bumpus Sparrow Data"))
par(mfrow=c(1,1))
MeanSpar<-colMeans(t(data2))
SSpar<-cov(t(data2))
MHX<-mahalanobis(Spar[,2:6], MeanSpar, SSpar)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
data2
data2 <- t(data2)
spm(data2,diagonal=c("boxplot"),smooth=FALSE,reg.line=FALSE,ellipse=TRUE,robust=FALSE,levels=c(0.90),main=c("Bumpus Sparrow Data"))
MeanSpar<-colMeans(data2))
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(49),df=5)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
data2 <- matrix(c(0.48, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 9, byrow = TRUE)
data2 <- matrix(c(0.48, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 8, byrow = TRUE)
dataEllipse(data2[1,], data2[2,],level = 0.95,ylim = c(-55,85), xlim = c(-38,45),main="Mineral Analysis \n95% Density Region for Normal Population \nConfidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],level = 0.95,ylim = c(-30,30), xlim = c(-10,10),main="Mineral Analysis \n95% Density Region for Normal Population \nConfidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],level = 0.95,ylim = c(-30,35), xlim = c(-5,5),main="Mineral Analysis \n95% Density Region for Normal Population \nConfidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
dataEllipse(data2[1,], data2[2,],level = 0.95,ylim = c(-30,35), xlim = c(-2,4),main="Mineral Analysis \n95% Density Region for Normal Population \nConfidence Regions (90%) for Mean Vector",xlab="Cr",ylab="St")
X<-rep(1,8)
confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE)
summary(confidenceEllipse(lm(cbind(data2[1,], data2[2,]) ~ 0 + X), Scheffe=FALSE,level=0.9, add=TRUE))
lines(c(-50,0.2),c(16.4,16.4),lty=2)
lines(c(-50,1.3),c(16.4,16.4),lty=2)
lines(c(1.3,1.3),c(-65,16.4),lty=2)
lines(c(0.2,0.2),c(-65,1.3),lty=2)
lines(c(-50,0.2),c(1.3,1.3),lty=2)
data2 <- t(data2)
spm(data2,diagonal=c("boxplot"),smooth=FALSE,reg.line=FALSE,ellipse=TRUE,robust=FALSE,levels=c(0.90),main=c("Bumpus Sparrow Data"))
par(mfrow=c(1,1))
MeanSpar<-colMeans(data2))
SSpar<-cov(data2)
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(49),df=5)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
abline(0, 2)
abline(0, .5)
abline(0, .25)
par(mfrow=c(1,1))
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(9),df=5)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, .25)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
?par
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(9),df=5)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
Qtiles<-qchisq(ppoints(9),df=2)
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(9),df=2)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[5]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[2]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
data2 <- matrix(c(0.48, 40.53, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 73.68, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 8, byrow = TRUE)
data2 <- matrix(c(0.48, 40.53, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 73.68, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 9, byrow = TRUE)
data2 <- t(data2)
spm(data2,diagonal=c("boxplot"),smooth=FALSE,reg.line=FALSE,ellipse=TRUE,robust=FALSE,levels=c(0.90),main=c("Bumpus Sparrow Data"))
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(9),df=2)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[5]^2),xlab=expression(chi[2]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[2]^2),xlab=expression(chi[2]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
data2 <- matrix(c(0.48, 2.19, 0.55, 0.74, 0.66, 0.93, 0.37, 0.22, 12.57, 11.13, 20.03, 20.29, 0.78, 4.64, 0.43, 1.08), nrow = 2, ncol = 8, byrow = TRUE)
data2 <- t(data2)
spm(data2,diagonal=c("boxplot"),smooth=FALSE,reg.line=FALSE,ellipse=TRUE,robust=FALSE,levels=c(0.90),main=c("Bumpus Sparrow Data"))
MeanSpar<-colMeans(data2)
SSpar<-cov(data2)
MHX<-mahalanobis(data2, MeanSpar, SSpar)
Qtiles<-qchisq(ppoints(8),df=2)
qqplot(Qtiles, MHX,main = expression("Mineral Analysis: Q-Q plot of " * ~D^2 * " vs. quantiles of" * ~ chi[2]^2),xlab=expression(chi[2]^2 * " quantiles"),ylab="Mahalanobis Distance")
abline(0, 1)
data <- as.matrix(sapply(read.table("/home/bonobo/Documents/Monsoon/gitwork/otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
library(vegan)
getwd()
sourceDir <- function (path, pattern = "\\.[rR]$", env = NULL, chdir = TRUE)
{
files <- sort(dir(path, pattern, full.names = TRUE))
lapply(files, source, chdir = chdir)
}
sourceDir
source(beta_div, chdir = T)
source("beta_div.r", chdir = T)
betaTurnover <- function(dfA){
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt/c(0,36,72,110,152))
}
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(0,1))
btPJ <- betaTurnover(dataPJ)
points(c(2020,2020,2020,2020,2020), btPJ, pch = c('1','2','3','4'), col = 'blue')
btPP <- betaTurnover(dataPP)
points(c(2344,2344,2344,2344,2344), btPP, pch = c('1','2','4'), col = 'green')
library(betapart)
?beta.SIM
betaTurnover <- function(dfA){
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt/c(0,36,72,110,152))
}
btGL <- betaTurnover(dataGL)
install.packages("betapart")
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- "otu_table_elevation.txt"(parent.frame(2)$ofile)
source("beta_div.r", chdir = T)
setwd("~/Documents/Monsoon/gitwork")
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
# abc<-function(x){
#   gam<-ncol(x)
library(betapart) #sudo apt-get install libgmp3-dev
install.packages("betapart")
library(betapart) #sudo apt-get install libgmp3-dev
betaTurnover <- function(dfA){
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt/c(0,36,72,110,152))
}
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(0,1))
btPJ <- betaTurnover(dataPJ)
points(c(2020,2020,2020,2020,2020), btPJ, pch = c('1','2','3','4'), col = 'blue')
btPP <- betaTurnover(dataPP)
points(c(2344,2344,2344,2344,2344), btPP, pch = c('1','2','4'), col = 'green')
library(betapart)
?beta.SIM
btGL <- betaTurnover(dataGL)
betaTurnover <- function(dfA){
alpha <- vector()
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt/c(0,36,72,110,152))
}
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(0,1))
btPJ <- betaTurnover(dataPJ)
?speciesDelta
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataGLp.beta <- beta.multi(dataGLp, index.family="sor")
dataGLp.beta
dataPJp <- dataPJ
dataPJp[dataPJp > 0] <- 1
dataPPp <- dataPP
dataPPp[dataPPp > 0] <- 1
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
G <- as.data.frame(betaSIM(dataGLp))
PJ <- as.data.frame(betaSIM(dataPJp))
PP <- as.data.frame(betaSIM(dataPPp[c(1,2,3,5),]))
---------
plot(c(1, 2, 3, 4), c(0.5029851,  0.4832,     0.6301616,  0.4622951))
summary(lm(c(1, 2, 3, 4)~ c(0.5029851,  0.4832,     0.6301616,  0.4622951)))
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
G <- as.data.frame(betaSIM(dataGLp))
PJ <- as.data.frame(betaSIM(dataPJp))
PP <- as.data.frame(betaSIM(dataPPp[c(1,2,3,5),]))
---------
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,3,5),], col = 'green')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4),], col = 'green')
x <- c(36,72,110,152)
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(0,1), col = 'red')
points(c(2020,2020,2020,2020), betaSIM(dataPJp)/x, col = 'blue')
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4),], col = 'green')
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(0,.1), col = 'red')
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(0,.1),, xlim = c(1700,2400) col = 'red')
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(0,.1),, xlim = c(1700,2400), col = 'red')
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, xlim = c(1700,2400), col = 'red')
points(c(2020,2020,2020,2020), betaSIM(dataPJp)/x, col = 'blue')
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4),], col = 'green')
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green')
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, xlim = c(1700,2400), col = 'red', pch = c(1,2,3,4))
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim - c(-0.01, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim + c(-0.01, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(-0.01, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
plot(c(1750,1750,1750,1750),betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
G <- as.data.frame(betaSIM(dataGLp))
PJ <- as.data.frame(betaSIM(dataPJp))
PP <- as.data.frame(betaSIM(dataPPp[c(1,2,3,5),]))
---------
plot(c(1, 2, 3, 4), c(0.5029851,  0.4832,     0.6301616,  0.4622951))
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
?beta.sim
?beta.temp
airTemp3 <- c(22.57,34.5533333333,28.7033333333,24.2933333333,20.5276190476,20.3666666667,32.1433333333,27.0066666667,22.3366666667,19.32,16.7833333333,28.4066666667,24.0233333333,19.29,16.6374285714)
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sor
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.jac
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")
}
print(df.turnover)
return(df.turnover)
}
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
#df.turnover[i-1] <-
print(beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.jac)
}
return(df.turnover)
}
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
#df.turnover[i-1] <-
print(beta.temp(t(df[1,]), t(df[i,]), index.family="sor"))
}
return(df.turnover)
}
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
#df.turnover[i-1] <-
print(beta.temp(t(df[1,]), t(df[i,]), index.family="jac"))
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
