install.packages("MASS")
library(MASS)
?spm
install.packages("SemiPar")
library(semipar)
library(SemiPar)
?spm
airData <- read.csv("/home/bonobo/Documents/MStats/Table1.5.csv", header = TRUE)
View(airData)
View(airData)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/test_data.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
View(commDat)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
?decorana
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/test_data.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca)
plot(comm.dca)
plot(comm.dca,display="sites")
plot(comm.dca,display="sites")
comm.dca['sites']
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1, header = TRUE)
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, header = TRUE)
head(commDat)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca,display="sites")
dcaSites=scores(comm.dca)
dcaSpp=scores(comm.dca,display="species")
dcaSpp=scores(comm.dca,display="sites")
plot(dcaSites[,1],dcaSites[,2],col=rep(c("Red","Orange","Blue","Green"),each=10),xlab="DCA1",ylab="DCA2")
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
install.packages("ecodist")
dcaSites[,1]
head(commDat)
attach(commDat)
sites
Sites
"Sites"
siteVector("BAL", "BRS", "KCW", "KUH", "MSB", "SOT", "TOG")
siteVector <- c("BAL", "BRS", "KCW", "KUH", "MSB", "SOT", "TOG")
commDat[0]
colnames(commDat)
siteVector <- substr(colnames(commDat), 0,2)
siteVector <- substr(colnames(commDat), 0,3)
plot(dcaSites[,1],dcaSites[,2],col=sitVector,xlab="DCA1",ylab="DCA2")
plot(dcaSites[,1],dcaSites[,2],col=siteVector,xlab="DCA1",ylab="DCA2")
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2")
bcDist=bcdist(t(commDat))
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
bcDist=bcdist(t(commDat))
comm.nms=nmds(bcDist,mindim=1,maxdim=2)#NMDS utilizes a random seed to initiate calculation of orthogonal axes.  Because of this, the default is to run the analysis many times, then select the run with the lowest "stress" (disagreement between the raw and ordinated data).
comm.nms.min=nmds.min(comm.nms)#this function finds the run with the minimum stress
plot(comm.nms.min[,1],comm.nms.min[,2],col=rep(c("Red","Orange","Blue","Green"),each=10),xlab="NMS1",ylab="NMS2")
comm.dca
plot(comm.nms.min[,1],comm.nms.min[,2],col=factor(siteVector),xlab="NMS1",ylab="NMS2")
plot(hclust(bcDist,method="average"),labels=colnames(comm))
plot(hclust(bcDist,method="average"),labels=colnames(commDat))
plot(hclust(bcDist,method="average"),labels=colnames(commDat), col=factor(siteVector))
?hclust
plot(hclust(bcDist,method="average"),labels=colnames(siteVector))
comm.perm=adonis(t(commDat)~siteVectormethod="bray")
comm.perm=adonis(t(commDat)~siteVector, method="bray")
comm.perm#this prints out a typical ANOVA table
comm.perm.NarBC=adonis(t(commDat)~siteVector(,1:2),method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[],1:2],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[,1:2],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[1:2],method="bray")
siteVector[1:2]
comm.perm.NarBC=adonis(t(commDat)~siteVector["BAL","SOT"],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[c("BAL", "SOT")],method="bray")
comm.perm.NarBC=adonis(t(commDat[,siteVector=="BAL" | siteector == "SOT"])~siteVector[],method="bray")
comm.perm.NarBC=adonis(t(commDat[,siteVector=="BAL" | siteVector == "SOT"])~siteVector[],method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat(siteVector=="BAL" | siteVector == "SOT"]),method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat(siteVector=="BAL" | siteVector == "SOT"),method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
commDatcommDat[siteVector=="BAL" | siteVector == "SOT"]
commDatcommDat[siteVector = "BAL" | siteVector = "SOT"]
commDat[siteVector = "BAL" | siteVector == "SOT"]
commDat[siteVector == "BAL" | siteVector == "SOT"]
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, header = TRUE)
head(commDat)
library(vegan)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca)
siteVector <- substr(colnames(commDat), 0,3)
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2")
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
bcDist=bcdist(t(commDat))
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2", labels = factor(siteVector))
?plot
data <- read.csv("/home/bonobo/Documents/MStats/Table5.1.csv", header = TRUE)
View(data)
data <- read.csv("/home/bonobo/Documents/MStats/Table5.1.csv", header = TRUE, row.names = 1)
View(data)
n <- nrow(data)
n
install.packages("simint")
a <- matrix(c(1,0,0))
View(a)
S <- cov(data)
View(S)
xbar <- apply(data, 2, mean)
eigen(S)
install.packages("multcomp")
library(multicomp)
head(data)
library(multicomp)
library(multcomp)
levels(data$Sweat_rate)
confint(data)
confint(data$Sweat_rate)
install.packages("agricolae")
p <- ncol(data)
(n-1)p/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)*p)/(n*(n-p))
((n-1)*p /(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
T2 <- n*t(xbar)%*%Sinv%*%xbar
Sinv < -ginv(S)
Sinv <- ginv(S)
Sinv <- solve(S)
T2 <- n*t(xbar)%*%Sinv%*%xbar
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
xbar <- as.matrix(apply(data, 2, mean))
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta1.L=xbar[1,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta1.U=xbar[1,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta2.L=xbar[2,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
xbar
View(S)
delta3.L=xbar[3,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
delta3.U=xbar[3,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
c(delta13L,delta3.U)
c(delta3.L,delta3.U)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
c(delta3.L,delta3.U)
delta1.LB=xbar[1,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta1.UB=xbar[1,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta2.LB=xbar[2,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta2.UB=xbar[2,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta3.LB=xbar[3,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
delta3.UB=xbar[3,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
c(delta1.LB,delta1.UB)c(delta1.LB,delta1.UB)
c(delta1.LB,delta1.UB)
c(delta2.LB,delta2.UB)
c(delta3.LB,delta3.UB)
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
}
return(df.turnover)
}
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
library(vegan)
library(betapart) #sudo apt-get install libgmp3-dev
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
setwd("~/Documents/Monsoon/gitwork")
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataGLp.beta <- beta.multi(dataGLp, index.family="sor")
dataGLp.beta
dataPJp <- dataPJ
dataPJp[dataPJp > 0] <- 1
dataPPp <- dataPP
dataPPp[dataPPp > 0] <- 1
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
#Plot BetaSIM at each elevation
