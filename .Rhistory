<<<<<<< HEAD
install.packages("MASS")
library(MASS)
?spm
install.packages("SemiPar")
library(semipar)
library(SemiPar)
?spm
airData <- read.csv("/home/bonobo/Documents/MStats/Table1.5.csv", header = TRUE)
View(airData)
View(airData)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/test_data.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
View(commDat)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
?decorana
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/test_data.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1)
commDat
library(vegan)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca)
plot(comm.dca)
plot(comm.dca,display="sites")
plot(comm.dca,display="sites")
comm.dca['sites']
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, skip = 1, header = TRUE)
View(commDat)
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, header = TRUE)
head(commDat)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca,display="sites")
dcaSites=scores(comm.dca)
dcaSpp=scores(comm.dca,display="species")
dcaSpp=scores(comm.dca,display="sites")
plot(dcaSites[,1],dcaSites[,2],col=rep(c("Red","Orange","Blue","Green"),each=10),xlab="DCA1",ylab="DCA2")
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
install.packages("ecodist")
dcaSites[,1]
head(commDat)
attach(commDat)
sites
Sites
"Sites"
siteVector("BAL", "BRS", "KCW", "KUH", "MSB", "SOT", "TOG")
siteVector <- c("BAL", "BRS", "KCW", "KUH", "MSB", "SOT", "TOG")
commDat[0]
colnames(commDat)
siteVector <- substr(colnames(commDat), 0,2)
siteVector <- substr(colnames(commDat), 0,3)
plot(dcaSites[,1],dcaSites[,2],col=sitVector,xlab="DCA1",ylab="DCA2")
plot(dcaSites[,1],dcaSites[,2],col=siteVector,xlab="DCA1",ylab="DCA2")
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2")
bcDist=bcdist(t(commDat))
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
bcDist=bcdist(t(commDat))
comm.nms=nmds(bcDist,mindim=1,maxdim=2)#NMDS utilizes a random seed to initiate calculation of orthogonal axes.  Because of this, the default is to run the analysis many times, then select the run with the lowest "stress" (disagreement between the raw and ordinated data).
comm.nms.min=nmds.min(comm.nms)#this function finds the run with the minimum stress
plot(comm.nms.min[,1],comm.nms.min[,2],col=rep(c("Red","Orange","Blue","Green"),each=10),xlab="NMS1",ylab="NMS2")
comm.dca
plot(comm.nms.min[,1],comm.nms.min[,2],col=factor(siteVector),xlab="NMS1",ylab="NMS2")
plot(hclust(bcDist,method="average"),labels=colnames(comm))
plot(hclust(bcDist,method="average"),labels=colnames(commDat))
plot(hclust(bcDist,method="average"),labels=colnames(commDat), col=factor(siteVector))
?hclust
plot(hclust(bcDist,method="average"),labels=colnames(siteVector))
comm.perm=adonis(t(commDat)~siteVectormethod="bray")
comm.perm=adonis(t(commDat)~siteVector, method="bray")
comm.perm#this prints out a typical ANOVA table
comm.perm.NarBC=adonis(t(commDat)~siteVector(,1:2),method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[],1:2],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[,1:2],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[1:2],method="bray")
siteVector[1:2]
comm.perm.NarBC=adonis(t(commDat)~siteVector["BAL","SOT"],method="bray")
comm.perm.NarBC=adonis(t(commDat)~siteVector[c("BAL", "SOT")],method="bray")
comm.perm.NarBC=adonis(t(commDat[,siteVector=="BAL" | siteector == "SOT"])~siteVector[],method="bray")
comm.perm.NarBC=adonis(t(commDat[,siteVector=="BAL" | siteVector == "SOT"])~siteVector[],method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat(siteVector=="BAL" | siteVector == "SOT"]),method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat(siteVector=="BAL" | siteVector == "SOT"),method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
commDatcommDat[siteVector=="BAL" | siteVector == "SOT"]
commDatcommDat[siteVector = "BAL" | siteVector = "SOT"]
commDat[siteVector = "BAL" | siteVector == "SOT"]
commDat[siteVector == "BAL" | siteVector == "SOT"]
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
comm.perm.NarBC=adonis(t(commDat)~commDat[siteVector=="BAL" | siteVector == "SOT"],method="bray")
commDat=read.csv("/home/bonobo/Documents/Serengeti/16S/comm_eco_16S_otus.txt",na.strings=c("","NA"), row.names = 1, header = TRUE)
head(commDat)
library(vegan)
comm.dca=decorana(t(commDat))
comm.dca
plot(comm.dca)
siteVector <- substr(colnames(commDat), 0,3)
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2")
library(ecodist)#this libary has a function for calculating Bray-Curtis distance
bcDist=bcdist(t(commDat))
plot(dcaSites[,1],dcaSites[,2],col=factor(siteVector),xlab="DCA1",ylab="DCA2", labels = factor(siteVector))
?plot
data <- read.csv("/home/bonobo/Documents/MStats/Table5.1.csv", header = TRUE)
View(data)
data <- read.csv("/home/bonobo/Documents/MStats/Table5.1.csv", header = TRUE, row.names = 1)
View(data)
n <- nrow(data)
n
install.packages("simint")
a <- matrix(c(1,0,0))
View(a)
S <- cov(data)
View(S)
xbar <- apply(data, 2, mean)
eigen(S)
install.packages("multcomp")
library(multicomp)
head(data)
library(multicomp)
library(multcomp)
levels(data$Sweat_rate)
confint(data)
confint(data$Sweat_rate)
install.packages("agricolae")
p <- ncol(data)
(n-1)p/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)p)/(n(n-p))
((n-1)*p)/(n*(n-p))
((n-1)*p /(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
((n-1)*p )/(n*(n-p) ) * qf(p=1-0.05,df1=p,df2=n-p)
T2 <- n*t(xbar)%*%Sinv%*%xbar
Sinv < -ginv(S)
Sinv <- ginv(S)
Sinv <- solve(S)
T2 <- n*t(xbar)%*%Sinv%*%xbar
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
xbar <- as.matrix(apply(data, 2, mean))
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta1.L=xbar[1,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta1.U=xbar[1,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[1,1]/n)
delta2.L=xbar[2,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
delta2.U=xbar[2,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[2,2]/n)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
xbar
View(S)
delta3.L=xbar[3,]-sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
delta3.U=xbar[3,]+sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))*sqrt(S[3,3]/n)
c(delta13L,delta3.U)
c(delta3.L,delta3.U)
c(delta1.L,delta1.U)
c(delta2.L,delta2.U)
c(delta3.L,delta3.U)
delta1.LB=xbar[1,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta1.UB=xbar[1,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[1,1]/n)
delta2.LB=xbar[2,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta2.UB=xbar[2,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[2,2]/n)
delta3.LB=xbar[3,]-qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
delta3.UB=xbar[3,]+qt(0.05/(2*p),n-1,lower.tail=F)*sqrt(S[3,3]/n)
c(delta1.LB,delta1.UB)c(delta1.LB,delta1.UB)
c(delta1.LB,delta1.UB)
c(delta2.LB,delta2.UB)
c(delta3.LB,delta3.UB)
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
}
return(df.turnover)
}
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
library(vegan)
library(betapart) #sudo apt-get install libgmp3-dev
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
setwd("~/Documents/Monsoon/gitwork")
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
=======
betaTurnover <- function(dfA){
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt)
}
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), log(btGL/c(0,36,72,110,152)), pch = c('1','2','3','4'), col = 'red', ylim = c(-5,0))
btPJ <- betaTurnover(dataPJ)
points(c(2020,2020,2020,2020,2020), log(btPJ/c(0,36,72,110,152)), pch = c('1','2','3','4'), col = 'blue')
btPP <- betaTurnover(dataPP)
points(c(2344,2344,2344,2344,2344), log(btPP/c(0,36,72,110,152)), pch = c('1','2','4'), col = 'green')
library(scatterplot3d)
scatterplot3d(btGL, c(1750,1750,1750,1750,1750), c(0,36,72,110,152))
scatterplot3d(c(1750,1750,1750,1750,1750),btGL, c(0,36,72,110,152))
scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL)
?scatterplot3d
scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL)
scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, col = 'red')
?scatterplot3d
scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, color = 'red')
points(c(0,36,72,110,152),(2020,2020,2020,2020,2020),btPJ, color = 'blue')
?scatterplot3d
scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, color = 'red')
points3d(c(0,36,72,110,152),(2020,2020,2020,2020,2020),btPJ, color = 'blue')
points3d(c(0,36,72,110,152),c(2020,2020,2020,2020,2020),btPJ, color = 'blue')
?scatterplot3d
?points3d
scatterplot3d.points3d(c(0,36,72,110,152),c(2020,2020,2020,2020,2020),btPJ, color = 'blue')
plot <- scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, color = 'red')
points3d(c(0,36,72,110,152),c(2020,2020,2020,2020,2020),btPJ, color = 'blue')
plot$points3d(c(0,36,72,110,152),c(2020,2020,2020,2020,2020),btPJ, color = 'blue')
?scatterplot3d
plot$points3d(c(0,36,72,110,152),c(2020,2020,2020,2020,2020),btPJ, col = 'blue')
plot <- scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, color = 'red')
plot <- scatterplot3d(c(0,36,72,110,152),c(1750,1750,1750,1750,1750),btGL, col = 'red')
?scatterplot3d
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), log(btGL/c(0,36,72,110,152)), pch = c('1','2','3','4'), col = 'red', ylim = c(-5,0))
btPJ <- betaTurnover(dataPJ)
points(c(2020,2020,2020,2020,2020), log(btPJ/c(0,36,72,110,152)), pch = c('1','2','3','4'), col = 'blue')
btPP <- betaTurnover(dataPP)
points(c(2344,2344,2344,2344,2344), log(btPP/c(0,36,72,110,152)), pch = c('1','2','4'), col = 'green')
betaTurnover <- function(dfA){
l <- vector()
for (i in 1:nrow(dfA)){
df <- dfA[i,][dfA[i,] != 0]
alpha[i] <- mean(specnumber(df))
if (i > 1){l[i] <- speciesDelta(ncol(dataPP), alpha[i])}
}
g <- ncol(dfA) - alpha[1]
print(g)
bt <- (l+rep(g, length(l)))/alpha
print(l)
print(alpha)
print(bt)
return(bt/c(0,36,72,110,152))
}
btGL <- betaTurnover(dataGL)
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(-5,0))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(-5,5))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(-1,1))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(-.1,.1))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(-.3,.3))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(0,.3))
plot(c(1750,1750,1750,1750,1750), btGL, pch = c('1','2','3','4'), col = 'red', ylim = c(0,1))
btPJ <- betaTurnover(dataPJ)
points(c(2020,2020,2020,2020,2020), log(btPJ/c(0,36,72,110,152)), pch = c('1','2','3','4'), col = 'blue')
points(c(2020,2020,2020,2020,2020), btPJ, pch = c('1','2','3','4'), col = 'blue')
btPP <- betaTurnover(dataPP)
points(c(2344,2344,2344,2344,2344), btPP, pch = c('1','2','4'), col = 'green')
?betaSIM
?beta.SIM
beat.multi
?beat.multi
library(beatpart)
library(betapart)
?beta.SIM
?beat.multi
?beta.multi
dataGL.beta <- beta.multi(dataGL, index.family="sim")
dataGL.beta <- beta.multi(dataGL, index.family="sor")
dataGL.beta <- beta.multi(dataGL, index.family="jac")
datGLp <- dataGL
datGLp[dataGLp > 0] <- 1
>>>>>>> fa72dbd4002d00ee86055c0c48be6788252d61da
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataGLp.beta <- beta.multi(dataGLp, index.family="jac")
dataGLp.beta$SIM
dataGLp.beta
dataGLp.beta <- beta.multi(dataGLp, index.family="sor")
dataGLp.beta
dataGLp.temp.beta <- (dataGLp[1,], dataGLp[2,], index.family="sor")
dataGLp[1,]
dataGLp.temp.beta <- (dataGLp[1,], dataGLp[2,], index.family="sor")
dataGLp.temp.beta <- beta.temp(dataGLp[1,], dataGLp[2,], index.family="sor")
dataGLp.temp.beta
dataGLp.temp.beta
head(dataGLp.temp.beta)
dataGLp.temp.beta <- beta.temp(t(dataGLp[1,]), t(dataGLp[2,]), index.family="sor")
head(dataGLp.temp.beta)
for (i in 2:nrows(dataGLp)){
beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor")
}
for (i in 2:nrow(dataGLp)){
beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor")
}
print(beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor"))
for (i in 2:nrow(dataGLp)){
print(beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor"))
}
dataGLp.turnover <- vector()
dataGLp.turnover <- vector()
for (i in 2:nrow(dataGLp)){
dataGLp.turnover[i-1] <- print(beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor"))
}
dataGLp.turnover <- vector()
for (i in 2:nrow(dataGLp)){
dataGLp.turnover[i-1] <- beta.temp(t(dataGLp[1,]), t(dataGLp[i,]), index.family="sor")$beta.sim
}
plot(dataGLp.turnover, c(36,72,110,152))
plot(c(36,72,110,152),dataGLp.turnover)
plot(c(36,72,110,152),dataGLp.turnover, xlim c(0,1))
plot(c(36,72,110,152),dataGLp.turnover, xlim = c(0,1))
plot(c(36,72,110,152),dataGLp.turnover, xlim = c(1,0))
plot(c(36,72,110,152),dataGLp.turnover, ylim = c(0,1))
betaSIM <- function(df){
df.turnover
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
plot(c(36,72,110,152),betaSIM(dataGLp), ylim = c(0,1))
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
<<<<<<< HEAD
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
=======
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
plot(c(36,72,110,152),betaSIM(dataGLp), ylim = c(0,1))
plot(c(36,72,110,152),betaSIM(dataGLp), ylim = c(0,1), col = 'red')
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
dataPJp <- dataPJ
dataPJp[dataPJp > 0] <- 1
points(x, betaSIM(dataPJp), col = 'blue')
dataPPp <- dataPP
dataPPp[dataPPp > 0] <- 1
points(x, betaSIM(dataPPp), col = 'green')
points(x[1,2,4], betaSIM(dataPPp[1,2,3,5]), col = 'green')
View(dataPPp)
x[1,2,4]
x[c(1,2,4)]
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5)]), col = 'green')
dataPPp[c(1,2,3,5)]
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5)]), col = 'green')
View(dataPPp)
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5)],), col = 'green')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
?prop.test
betaSIM(dataGLp)
G <- betaSIM(dataGLp)
PJ <- betaSIM(dataPJp)
PP <- betaSIM(dataPPp)
PP <- betaSIM(dataPPp[c(1,2,3,5),])
View(dataPPp)
G <- as.vector(betaSIM(dataGLp))
G <- as.vector(betaSIM(dataGLp))
G <- as.data.frame(betaSIM(dataGLp))
View(G)
PJ <- as.data.frame(betaSIM(dataPJp))
PP <- as.data.frame(betaSIM(dataPPp[c(1,2,3,5),]))
View(PJ)
View(PP)
plotc(c(1, 2, 3, 4), c(0.5029851,  0.4832,     0.6301616,  0.4622951))
plot(c(1, 2, 3, 4), c(0.5029851,  0.4832,     0.6301616,  0.4622951))
summary(lm(c(1, 2, 3, 4)~ c(0.5029851,  0.4832,     0.6301616,  0.4622951)))
library(betapart)
data(bbsData)
View(bbs1980)
View(bbs1980)
View(bbs1980)
data(ceram.s)
View(ceram.s)
ceram.beta<-beta.multi(ceram.s, index.family="sor")
ceram.beta
bbs.t <- beta.temp(bbs1980, bbs2000, index.family="sor")
bbs.t
View(data)
View(dataGLp)
GL[1,]
dataGLp[1,]
gl.t < beta.temp(dataGLp[1,], dataGLp[2,], index.family="sor")
gl.t <- beta.temp(dataGLp[1,], dataGLp[2,], index.family="sor")
View(gl.t)
gl.t <- beta.temp(t(dataGLp[1,]), t(dataGLp[2,]), index.family="sor")
gl.t
gl.t <- beta.temp(t(c(dataGLp[1,],dataPJp[1,],dataPPp[1,])), t(c(dataGLp[2,],dataPJp[2,],dataPPp[2,])), index.family="sor")
gl.t
c(dataGLp[1,],dataPJp[1,],dataPPp[1,])
setwd("~/Documents/Monsoon/gitwork")
library(vegan)
data <- as.matrix(sapply(read.table("otu_table_elevation.txt", sep = "\t",row.names = 1, skip = 1,as.is=T), as.numeric))
colnames(data) <- c('PJset','GLCH4','GLH1','GLset','PJCH3','GLCH2','GLCH3','PJCH4','PPCH4','PPCH2','PPH1','PPset','PJH1','PJCH2')
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
# dataGL <- t(dataGL[rowSums(dataGL) != 0,])
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
# dataPJ <- t(dataPJ[rowSums(dataPJ) != 0,])
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
# dataPP <- t(dataPP[rowSums(dataPP) != 0,])
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataGLp.beta <- beta.multi(dataGLp, index.family="sor")
dataGLp.beta
dataPJp <- dataPJ
dataPJp[dataPJp > 0] <- 1
dataPPp <- dataPP
dataPPp[dataPPp > 0] <- 1
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataGLp <- dataGL
dataGLp[dataGLp > 0] <- 1
dataPJp <- dataPJ
dataPJp[dataPJp > 0] <- 1
dataPPp <- dataPP
dataPPp[dataPPp > 0] <- 1
#Creating function to loop over all possible comparisons
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
betaSIM(dataGLp)
dataGLp <- t(dataGL)
dataGLp[dataGLp > 0] <- 1
dataPJp <- t(dataPJ)
dataPJp[dataPJp > 0] <- 1
dataPPp <- t(dataPP)
dataPPp[dataPPp > 0] <- 1
betaSIM(dataGLp)
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5)]), col = 'green')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
dataPPp[c(1,2,3,5),]
dataPPp[c(1,2,3,5),]
dataPPp
dataPPp <- t(dataPP)
dataPPp[dataPPp > 0] <- 1
dataPPp[c(1,2,3,5),]
dataPPp
dataPJp
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
dataPPp <- t(dataPP)
View(dataPPp)
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPPp <- t(dataPP)
dataPPp[dataPPp !=  0] <- 1
View(dataPPp)
dataPP <- cbind('PPCH3' = NA, dataPP)
View(dataPPp)
dataGL <- data[,c('GLCH4','GLH1','GLset','GLCH2','GLCH3')]
dataGL <- dataGL[,c(3,2,4,5,1)]
dataGL <- t(dataGL)
dataGL[dataGLp > 0] <- 1
dataPJ <- data[,c('PJset','PJCH3','PJCH4','PJH1','PJCH2')]
dataPJ <- dataPJ[,c(1,4,5,2,3)]
dataPJ <- t(dataPJ)
dataPJ[dataPJp > 0] <- 1
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP)
dataPPp[dataPPp !=  0] <- 1
dataPP <- cbind('PPCH3' = NA, dataPP)
View(dataPP)
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP)
dataPPp[dataPPp !=  0] <- 1
dataPP <- rbind('PPCH3' = NA, dataPP)
View(dataPP)
dataPP <- dataPP[,c(2,3,4,1,5)]
View(dataPP)
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP)
dataPP[dataPPp !=  0] <- 1
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[,c(2,3,4,1,5)]
View(dataPP)
dataPP <- data[,c('PPCH4','PPCH2','PPH1','PPset')]
dataPP <- dataPP[,c(4,3,2,1)]
dataPP <- t(dataPP)
dataPP[dataPPp !=  0] <- 1
dataPP <- rbind('PPCH3' = NA, dataPP)
dataPP <- dataPP[c(2,3,4,1,5),]
View(dataPP)
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="jac")$beta.jac
}
return(df.turnover)
}
betaSIM(dataGL)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJ), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green')
x <- c(36,72,110,152)
plot(c(1750,1750,1750,1750),betaSIM(dataGL)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJ), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
print(beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim)
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
print(beta.temp((df[i-1,]), (df[i,]), index.family="jac")$beta.sim)
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
print(df[i-1,])
print(beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim)
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
print(i)
print(beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim)
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
>>>>>>> fa72dbd4002d00ee86055c0c48be6788252d61da
}
return(df.turnover)
}
x <- c(36,72,110,152)
<<<<<<< HEAD
plot(x,betaSIM(dataGLp), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJp), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPPp[c(1,2,3,5),]), col = 'green')
#Plot BetaSIM at each elevation
=======
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
?beta.temp
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
print(i)
print(beta.temp(t(df[i-1,]), t(df[i,]), index.family="sor")$beta.sim)
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="jac")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="sim")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[i-1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
x <- c(36,72,110,152)
plot(x,betaSIM(dataGL), ylim = c(0,1), col = 'red')
points(x, betaSIM(dataPJ), col = 'blue')
points(x[c(1,2,4)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green')
plot(c(1750,1750,1750,1750),betaSIM(dataGL)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
x <- c(36,72-36,110-72,152-110)
plot(c(1750,1750,1750,1750),betaSIM(dataGL)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
plot(c(1750,1750,1750,1750),betaSIM(dataGL)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
airTemp3 <- c(22.57,34.5533333333,28.7033333333,24.2933333333,20.5276190476,20.3666666667,32.1433333333,27.0066666667,22.3366666667,19.32,16.7833333333,28.4066666667,24.0233333333,19.29,16.6374285714)
x <- c(36,72,110,152)
plot(airTemp3[c(,2,3,4,5)],betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(,2,3,4,5),],betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(2,3,4,5),],betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, ylim = c(-0.001, 0.025), xlim = c(17,30), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, xlim = c(17,30), col = 'red', pch = c('1','2','3','4'))
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(12,13,14,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
points(airTemp3[c(12,13,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
dataPPp[c(1,2,3,5),]
points(x[c(1,2,4)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green')
View(dataPP)
points(airTemp3[c(12,13,14,15)], betaSIM(dataPPp[c(2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
points(airTemp3[c(12,13,14,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
airTemp3[c(12,13,14,15)
airTemp3[c(12,13,14,15)]
airTemp3[c(12,13,14,15)]
plot(c(1750,1750,1750,1750),betaSIM(dataGL)/x, ylim = c(-0.001, 0.025), xlim = c(1700,2400), col = 'red', pch = c('1','2','3','4'))
points(c(2020,2020,2020,2020), betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(c(2344,2344,2344), betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
points(airTemp3[c(13,14,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(13,14,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
betaSIM <- function(df){
df.turnover <- vector()
for (i in 2:nrow(df)){
df.turnover[i-1] <- beta.temp(t(df[1,]), t(df[i,]), index.family="sor")$beta.sim
}
return(df.turnover)
}
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGLp)/x, xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJp)/x, col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(13,14,15)], betaSIM(dataPPp[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
dataPPp[c(1,2,3,5),]
View(dataPP)
dataPPp[c(1,2,3,5)]
dataPPp[,c(1,2,3,5)]
head(dataPPp)
dataPPp[c(1,2,3,5),]
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGL)/x, xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(13,14,15)], betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
points(airTemp3[c(12,13,15)], betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGL)/x, xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJ)/x, col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(12,13,15)], betaSIM(dataPP[c(1,2,3,5),])/x[c(1,2,4)], col = 'green', pch = c('1','2','4') )
airTemp3[c(7,8,9,10)]
airTemp3[c(2,3,4,5)]
airTemp3[c(12,13,15)]
betaSIM(dataGL)
betaSIM(dataPJ)
betaSIM(dataPP)
dataPP[c(1,2,3,5),]
betaSIM(dataPP[c(1,2,3,5),])
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGL), xlim = c(17,35), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJ), col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(12,13,15)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green', pch = c('1','2','4') )
plot(airTemp3[c(2,3,4,5)],betaSIM(dataGL), col = 'red', pch = c('1','2','3','4'))
points(airTemp3[c(7,8,9,10)], betaSIM(dataPJ), col = 'blue', pch = c('1','2','3','4'))
points(airTemp3[c(12,13,15)], betaSIM(dataPP[c(1,2,3,5),]), col = 'green', pch = c('1','2','4') )
betaSIM(dataPP)
>>>>>>> fa72dbd4002d00ee86055c0c48be6788252d61da
